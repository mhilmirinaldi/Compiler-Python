Terminals:
+ - * / % ! = > < ( ) ' " : , if elif else and or def return while for in range break pass continue variable string number true false class is none not print input str float int double import as from with open raise len
Variables:
S VV VAR VAL COMMENT TEXT BOOLEAN OP STRING IF ELIF ELSE LOOPEND PRINT EXPRESSION WHILE FOR DEF COMPARE INPUT CBRACKET TYPE CLASS IMPORT RETURN RAISE METHOD
Productions:
S -> S S | VAR = VV | VAR + = VV | VAR - = VV | VAR * = VV | VAR / = VV | IMPORT | COMMENT | PRINT | IF | WHILE | FOR | DEF | CLASS;
VV -> VAR | VAL | VV OP VV | INPUT | VV , VV | none | METHOD;
VAR -> variable;
CBRACKET -> ( VV ) | ( );
OP -> + | - | * | / | %;
VAL -> number | ( VV ) | VV OP VV | VV * * VV | VV / / VV | BOOLEAN | STRING;
TYPE -> int | str | float | double;
INPUT -> input CBRACKET | TYPE ( INPUT );
COMPARE -> = = | ! = | > = | < = | > | < | is;
BOOLEAN -> true | false | VV COMPARE VV | BOOLEAN and BOOLEAN | BOOLEAN or BOOLEAN | not BOOLEAN;
EXPRESSION -> ( BOOLEAN ) : S | BOOLEAN : S;
IF -> if EXPRESSION | IF ELIF | IF ELSE | IF LOOPEND | IF RAISE;
ELIF -> elif EXPRESSION | ELIF ELIF | ELIF ELSE;
ELSE -> else : S;
TEXT -> VAR | TEXT TEXT;
STRING -> " string " | ' string ' | " TEXT " | ' TEXT ' | STRING + STRING | STRING * number | STRING * ( VAL );
COMMENT -> " " " TEXT " " " | ' ' ' TEXT ' ' ';
PRINT -> print CBRACKET;
IMPORT -> import VAR as VAR | import VAR | from VAR import VAR | from VAR import VAR as VAR;
RAISE -> raise CBRACKET;
LOOPEND -> continue | break | pass;
WHILE -> while EXPRESSION;
FOR -> for VAR in STRING : S | for VAR in range CBRACKET : S;
RETURN -> return BOOLEAN | return VAL;
DEF -> def VAR CBRACKET : S | DEF RETURN;
CLASS -> class VAR : S;
METHOD -> len CBRACKET | with open CBRACKET as VAR